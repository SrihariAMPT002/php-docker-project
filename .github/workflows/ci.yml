name: PHP Docker CI

on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main

jobs:
  build:
    runs-on: ubuntu-latest
    
    services:
      docker:
        image: docker:19.03.12
        options: --privileged

    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - name: Log in to Docker Hub
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2

      - name: Cache Docker layers
        uses: actions/cache@v3
        with:
          path: /tmp/.buildx-cache
          key: ${{ runner.os }}-docker-${{ github.sha }}
          restore-keys: |
            ${{ runner.os }}-docker-

      - name: Build Docker image
        run: |
          docker build -t ${{ secrets.DOCKER_USERNAME }}/sql-test:latest .

      - name: Push Docker image to Docker Hub
        run: |
          docker push ${{ secrets.DOCKER_USERNAME }}/sql-test:latest

      - name: Run Docker container with MySQL service
        run: |
          docker network create mynetwork
          
          # Start MySQL container in detached mode
          docker run -d --name mysql-container --network mynetwork -e MYSQL_ROOT_PASSWORD=root mysql:latest

          # Wait for MySQL to be ready before starting the PHP app
          until docker exec mysql-container mysqladmin --user=root --password=root --host=localhost --silent ping; do
            echo "Waiting for MySQL to be ready..."
            sleep 2
          done

          # Start PHP app container
          docker run -d -p 8080:80 --name php-app --network mynetwork -e DB_HOST=mysql-container -e DB_USER=root -e DB_PASSWORD=root ${{ secrets.DOCKER_USERNAME }}/sql-test:latest

      - name: Test the PHP application
        run: |
          # Wait for PHP app to be ready
          sleep 20
          
          # Use curl to test the PHP application within the Docker network
           docker exec php-app curl --fail http://php-app:8080/index.php || exit 1

      - name: Clean up Docker containers
        run: |
          docker stop $(docker ps -q)
          docker system prune -f
